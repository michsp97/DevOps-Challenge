AWSTemplateFormatVersion: 2010-09-09
Description: This Cloudformation will deploy an EC2 instance and MySQL RDS instance

Parameters:
  KeyPairName:
    Type: String
    Description: The name of an existing Amazon EC2 key pair in this region to use to SSH into the Amazon EC2 instances.
  DBName:
    Default: 'mydb'
    Description: My database
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
  DBInstanceClass:
    Default: db.t3.micro
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
  DBAllocatedStorage:
    Default: '20'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '20'
    MaxValue: '65536'
  DBUsername:
    NoEcho: 'true'
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
    Default: 'admin'
  DBPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: Must contain only alphanumeric characters, between 8 and 41 characters.

Mappings:
  Configuration:
    Stack:
      LatestImageId: '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}'

Resources:
  AppVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 100.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub
            - "${stackName}-VPC"
            - stackName: !Ref AWS::StackName
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      VpcId: !Ref AppVPC
      CidrBlock: 100.0.0.0/24
      Tags:
        - Key: Name
          Value: !Sub
            - "${stackName}-subnetA"
            - stackName: !Ref AWS::StackName
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      VpcId: !Ref AppVPC
      CidrBlock: 100.0.1.0/24
      Tags:
        - Key: Name
          Value: !Sub
            - "${stackName}-subnetB"
            - stackName: !Ref AWS::StackName
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref AppVPC
  AppInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [Configuration, Stack, LatestImageId] # Latest Amazon Linux 2 AMI image
      InstanceType: t2.micro
      SubnetId: !Ref SubnetA
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref AppIngressSecurityGroup
        - !Ref AppDbSecurityGroup
      Tags:
        - Key: "Name"
          Value: !Sub
            - "${stackName}-Instance"
            - stackName: !Ref AWS::StackName
  AppIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub
        - "${stackName}-app-ec2-sg"
        - stackName: !Ref AWS::StackName
      GroupDescription: "Allow SSH inbound and outbound traffic"
      VpcId: !Ref AppVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub
            - "${stackName}-app-ec2-sg"
            - stackName: !Ref AWS::StackName
  AppDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub
        - "${stackName}-DB"
        - stackName: !Ref AWS::StackName
      DBName: !Ref DBName
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: !Ref DBInstanceClass
      Engine: MySQL
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref RDSSubnetGroup
      VPCSecurityGroups:
        - !Ref AppDbSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub
            - "${stackName}-DB"
            - stackName: !Ref AWS::StackName
  AppDbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub
        - "${stackName}-db-ec2-sg"
        - stackName: !Ref AWS::StackName
      GroupDescription: Allow MySql inbound traffic
      VpcId: !Ref AppVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub
            - "${stackName}-db-ec2-sg"
            - stackName: !Ref AWS::StackName
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub
        - "${stackName}-db-subnet-group"
        - stackName: !Ref AWS::StackName
      DBSubnetGroupDescription: RDS Subnet Group
      SubnetIds:
        - !Ref SubnetA
        - !Ref SubnetB

Outputs:
  AppDatabaseEndpoint:
    Description: Connection endpoint for the database
    Value: !GetAtt AppDatabase.Endpoint.Address
  DbInstanceId:
    Description: InstanceId of the newly created RDS Instance
    Value: !Ref AppDatabase